// This file is part of the GLERI project
//
// Copyright (c) 2012 by Mike Sharov <msharov@users.sourceforge.net>
// This file is free software, distributed under the MIT License.
//
// config.h generated by configure
#pragma once

// Define to the one symbol short name of this package.
#define @PKG_UNAME@_NAME	"@PKG_NAME@"
// Define to the version of this package.
#define @PKG_UNAME@_VERSION	@PKG_VERSION@
// Define to the version string of this package.
#define @PKG_UNAME@_VERSTRING	"@PKG_VERSTR@"
// Define to the address where bug reports for this package should be sent.
#define @PKG_UNAME@_BUGREPORT	"@PKG_BUGREPORT@"

// Define to the name of the service executable
#define @PKG_UNAME@S_NAME	"@PKG_NAME@s"
#define @PKG_UNAME@S_SOCKET	"%s/.config/" @PKG_UNAME@S_NAME ".socket"
#define @PKG_UNAME@S_PORT	6540

// Tweak gcc
#if __GNUC__
    #define NORETURN	__attribute((noreturn))
#else
    #define NORETURN
#endif
// Other common settings
#if __i386__ || __x86_64__
    #define __x86__ 1
#endif

// Define to 1 if you have sys/sendfile.h
#undef HAVE_SYS_SENDFILE_H

// Define to 1 if you have the uSTL library
#undef HAVE_USTL_H

// Define to 1 if you want to use the uSTL library
#undef USE_USTL

#if HAVE_USTL_H && USE_USTL
    #include <ustl.h>
    using namespace ustl;
    #if USTL_VERSION < 0x200
	#error "uSTL version 2.0 is required for this project"
    #endif
#else
    #include <algorithm>
    #include <vector>
    #include <set>
    using namespace std;

    /// Rounds \p n up to be divisible by \p grain
    template <typename T>
    inline constexpr T Align (T n, size_t grain)
	{ return ((n+(grain-1))-(n+(grain-1))%grain); }

    #define inline	inline __attribute__((always_inline))
#endif

// Global macros turning on library features
#define __STDC_LIMIT_MACROS
// Standard includes
#include <stdint.h>
#include <limits.h>
#include <string.h>
#include <assert.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>

namespace {

/// Returns the number of elements in a static vector
template <typename T, size_t N> constexpr inline size_t ArraySize (T(&)[N]) { return (N); }
template <typename T> constexpr inline size_t ArraySize (T[0]) { return (0); }
/// Returns the end() for a static vector
template <typename T, size_t N> constexpr inline T* ArrayEnd (T(&a)[N]) { return (&a[N]); }
template <typename T> constexpr inline T* ArrayEnd (T(&a)[0]) { return (a); }
/// Expands into a ptr,size expression for the given static vector; useful as link arguments.
#define ArrayBlock(v)	&(v)[0], ArraySize(v)
/// Expands into a begin,end expression for the given static vector; useful for algorithm arguments.
#define ArrayRange(v)	&(v)[0], ArrayEnd(v)

// Macros to expand macro values into a string
#define PP_STRINGIFY(x)		#x
#define PP_STRINGIFY_I(x)	PP_STRINGIFY(x)

} // namespace
