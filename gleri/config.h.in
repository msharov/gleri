// This file is part of the GLERI project
//
// Copyright (c) 2012 by Mike Sharov <msharov@users.sourceforge.net>
// This file is free software, distributed under the MIT License.
//
// config.h generated by configure
#pragma once

// Define to the one symbol short name of this package.
#define GLERI_NAME		"@PKG_NAME@"
// Define to the version string of this package.
#define GLERI_VERSTRING		"@PKG_VERSTR@"
// Define to the address where bug reports for this package should be sent.
#define GLERI_BUGREPORT		"@PKG_BUGREPORT@"

// Define to the name of the service executable
#define GLERIS_NAME		"@PKG_NAME@s"
#define GLERIS_SOCKET		"%s/.config/" GLERIS_NAME "-%u.socket"
#define GLERIS_XDG_SOCKET	"%s/" GLERIS_NAME "-%u.socket"
#define GLERIS_PORT		6540
enum {
    GLERI_VERSION = @PKG_VERSION@,
    GLERI_PROTOCOL_VERSION = 0
};

// Tweak gcc
#if !defined(UNUSED)
    #if __GNUC__
	#define NORETURN	__attribute((noreturn))
	#define PURE		__attribute((pure))
	#define CONST		__attribute((const))
	#define UNUSED		__attribute((unused))
    #else
	#define NORETURN
	#define PURE
	#define CONST
	#define UNUSED
    #endif
#endif
// Other common settings
#if __i386__ || __x86_64__
    #define __x86__ 1
#endif

// Define to 1 if you have sys/sendfile.h
#undef HAVE_SYS_SENDFILE_H

// Define to 1 if you want to use the uSTL library
#undef USE_USTL
#if USE_USTL
    // Define to 1 if you have the uSTL library
    #undef HAVE_USTL_H
#endif

#if HAVE_USTL_H && USE_USTL
    #include <ustl.h>
    using namespace ustl;
    #if USTL_VERSION < 0x220
	#error "uSTL version 2.2 is required for this project"
    #endif
#else
    #include <type_traits>
    #include <algorithm>
    #include <endian.h>
    #include <memory>
    #include <vector>
    #include <set>
    using namespace std;

    /// Rounds \p n up to be divisible by \p grain
    template <typename T>
    inline constexpr T Align (T n, size_t grain)
	{ return ((n+(grain-1))-(n+(grain-1))%grain); }

    #define foreach(type,i,ctr)	for (type i = (ctr).begin(); i != (ctr).end(); ++ i)

    #define inline	inline __attribute__((always_inline))

    #define USTL_LITTLE_ENDIAN	LITTLE_ENDIAN
    #define USTL_BIG_ENDIAN	BIG_ENDIAN
    #define USTL_BYTE_ORDER	BYTE_ORDER
#endif
