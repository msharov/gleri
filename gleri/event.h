// This file is part of the GLERI project
//
// Copyright (c) 2013 by Mike Sharov <msharov@users.sourceforge.net>
// This file is free software, distributed under the MIT License.

#pragma once
#include "util.h"

class CEvent {
public:
    using key_t		= uint32_t;
    using ctrlid_t	= uint16_t;
    using coord_t	= G::coord_t;
    enum : ctrlid_t { AllControls = numeric_limits<ctrlid_t>::max() };
    enum EType : uint32_t {
	// Window control events
	Destroy,
	Close,
	Ping,
	VSync,
	Focus,
	Visibility,
	// User input
	KeyDown,
	KeyUp,
	ButtonDown,
	ButtonUp,
	Motion,
	Crossing,
	Clipboard,
	// UI-generated events	x = sender ctrlid, y = receiver ctrlid (may be AllControls)
	Command,	// Generated by menu items or hotkeys
	UIChanged,	// Sent by control when user changes it, key (or IValue) is new absolute (or differential) value.
	UIAccepted	// Like UIChanged, but implies final selection. key is new value.
    };
public:
    key_t	key;
    coord_t	x;
    coord_t	y;
    EType	type;
    uint32_t	time;
public:
    explicit constexpr	CEvent (EType ntype = Destroy, key_t nkey = 0, coord_t nx = 0, coord_t ny = 0, uint32_t ntime = 0)
			    :key(nkey),x(nx),y(ny),type(ntype),time(ntime) {}
    static CEvent	PingEvent (uint64_t time)	{ return LongnumEvent (Ping, time); }
    static CEvent	CommandEvent (const char* cmd)	{ return LongnumEvent (Command, uintptr_t(cmd)); }
    static CEvent	UIChangedEvent (const char* c)	{ return LongnumEvent (Command, uintptr_t(c)); }
    static CEvent	UIAcceptedEvent (const char* c)	{ return LongnumEvent (Command, uintptr_t(c)); }
    inline const char*	CommandName (void) const	{ return (const char*) MakeLongnum(); }
    inline time_t	Time (void) const		{ return (time_t) MakeLongnum(); }
    inline int		IValue (void) const		{ return key; }
    inline ctrlid_t	SrcControl (void) const		{ return x; }
    inline ctrlid_t	DestControl (void) const	{ return y; }
    inline void		read (bstri& is)		{ is.iread (*this); }
    inline void		write (bstro& os) const		{ os.iwrite (*this); }
    inline void		write (bstrs& ss) const		{ ss.iwrite (*this); }
private:
    static CEvent	LongnumEvent (EType ntype, uint64_t n)	{ return CEvent (ntype, key_t(n), 0, 0, uint32_t(n>>32)); }
    inline uint64_t	MakeLongnum (void) const	{ return (uint64_t(time)<<32)|key; }
};

#define GLERI_EVENT_SIGNATURE	"(unnuu)"

namespace Key {
    using key_t	= CEvent::key_t;
    enum : key_t {
	UnicodePrivateUseRegionStart = 0xe000,	///< Used for non-character keycodes below
	UnicodePrivateUseRegionEnd = 0xf8ff,
	X11_XKBase = 0xff00,			///< Add to key to get the value from X11/keysymdef.h
	X11_XF86XK_Base = 0x1008ff00,		///< Add to key to get the value from X11/XF86keysym.h
	X11_XKUnicodeBase = 0x01000000		///< Unicode character constants in X11/keysymdef.h
    };
    enum : key_t {
	ModShift = 24,				///< Bits used by the keycode without KMod modifiers
	ModMask = (UINT32_MAX<<ModShift),	///< Mask to get the KMod values
	KeyMask = ~ModMask			///< Mask to get the keycode without modifiers
    };
    enum : key_t {
	Null, Menu, PageUp, Copy, Break,
	Insert, Delete, Pause, Backspace, Tab,
	Enter, Redo, PageDown, Home, Alt,
	Shift, Ctrl, CapsLock, NumLock, ScrollLock,
	SysReq, Banner, Paste, Close, Cut,
	End, Undo, Escape, Right, Left,
	Up, Down,
	Space,
	// Space through ~ are printable characters
	// Then there are keys with unicode values
	// Put the rest of the codes in the Unicode private use region
	F0 = UnicodePrivateUseRegionStart, F1, F2, F3, F4,
	F5, F6, F7, F8, F9,
	F10, F11, F12, F13, F14,
	F15, F16, F17, F18, F19,
	F20, F21, F22, F23, F24,
	Back, Calculator, Center, Documents, Eject,
	Explorer, Favorites, Find, Forward, Help,
	Hibernate, History, LogOff, Mail, Mute,
	New, Open, Options, Play, PowerDown,
	Print, Refresh, Save, ScreenSaver, Spell,
	Stop, VolumeDown, VolumeUp, WWW, WheelButton,
	ZoomIn, ZoomOut,
	XKBase = F0+0x100,	// These are special keys from X11/keysymdef.h that do not convert to any of the above values
	XFKSBase = XKBase+0x200	// ... and these are from X11/XF86keysym.h . Add the Key::X11_ bases to get the X11 value.
	// Can add more until UnicodePrivateUseRegionEnd
    };
}; // namespace Key

namespace Button {
    using button_t = CEvent::key_t;
    enum : button_t {
	NoButton, Left, Middle, Right,
	WheelUp, WheelDown, WheelLeft, WheelRight
    };
} // namespace Button

namespace KMod {
    using key_t = CEvent::key_t;
    enum {
	ShiftShift = Key::ModShift,
	CtrlShift,
	AltShift,
	BannerShift,
	LeftShift,
	MiddleShift,
	RightShift,
    };
    enum : key_t {
	Shift	= (1<<ShiftShift),
	Ctrl	= (1<<CtrlShift),
	Alt	= (1<<AltShift),
	Banner	= (1<<BannerShift),
	Left	= (1<<LeftShift),
	Middle	= (1<<MiddleShift),
	Right	= (1<<RightShift)
    };
} // namespace KMod

enum class Visibility : uint32_t {
    Unobscured,
    PartiallyObscured,
    FullyObscured
};

enum class ClipboardOp : uint32_t {
    Rejected,
    Accepted,
    Read,
    Cleared
};
